# author:panying
# do something about the Bayes
# 一般步骤:对朴素贝叶斯的一般算法路径做描述
# 1、收集数据：此部分使用订单中昵称和商品标题名
# 2、准备数据：需要数值型或者布尔逻辑型
# 3、分析数据：有大量特征时，给绘制特征作用不大，此时使用直方图效果最好
# 4、训练算法：计算不同的独立特征的条件概率
# 5、测试算法：计算错误率
# 6、使用算法：一个常见的朴素贝叶斯应用应该是文档分类，可以在任意的分类场景中使用朴素贝叶斯分类器，不一定非要是文本。

# 2、准备数据：从文本中构建词向量
# 词表到向量的转换函数

from numpy import *

def loadDataSet():
    postingList = [['my','dog','has','flea',\'
                    problems','help','please'],
                   ['maybe','not','take','him',\'
                    to','dog','park','stupid'],\
                   ['my','dalmation','is','so',\'
                    cute','I','love','him'],
                   ['stop','posting','stupid','worthless','garbage'],
                   ['mr','licks','ate','my','steak','how','to','stop','him'],
                   ['quit','buying','worthless','dog','food','stupid']]
    classVec = [0,1,0,1,0,1]  #1 代表侮辱性语言，0代表正常言论
    return posetingList,classVec

# 创建一个空集
def createVocabList(dataSet):
    vocabSet = set([])
    for document in dataSet:
        vocabSet = vocabSet | set(document) # 创建两个集合的并集
    return list(vocabSet)


def setOfWords2Vec(vocabList, inputSet):
    returnVec = [0]*len(vocabList)  # 创建一个其中所含元素都为0的向量
    for word in inputSet:
        if word in vocabList:
           returnVec[vocabList.index(word)] = 1
        else: print "the word: %s is not in my Vocabbulary!" % word
    return returnVec
 
 # 朴素贝叶斯分类器训练函数
 def trainNBO(trainMatrix,trainCategory):
     numTrainDocs = len(trainMatrix)
     numWords = len(trainMatrix[0])
     pAbusive = sum(trainCategory)/float(numTrainDocs)
     '''
     p0Num = zeros(numWords); p1Nums = zeros(numWords) # 初始化概率
     p0Denom = 0.0; p1Denom = 0.0
     贝叶斯算法中，条件概率通过乘积获得，在算法中，当某概率值为0时候，则该元素条件概率为0，故修改为
     '''
     p0Num = ones(numWords); p1Nums = ones(numWords) # 初始化概率，将其初始化为1，则分母为量值和即2
     p0Denom = 2.0; p1Denom = 2.0
     for i in range(numTrainDocs):
         if trainCategory[i] == 1:
            p1Num += trainMatrix[i]
            p1Denom += sum(trainMatrix[i])
         else:
            p0Num += trainMatrix[i]
            p0Denom += sum(trainMatrix[i])
     '''
     p1Vect = p1Num/p1Denom       #change to log()  对每个元素做除法
     p0Vect = p0Num/p0Denom       #change to log()
     最后获得的pxect中的数据因太小数相乘，则获得值更小，故将其对数化，降低数据的离散化程度
     '''
     p1Vect = log(p1Num/p1Denom)       #change to log()  对每个元素做除法
     p0Vect = log(p0Num/p0Denom)       #change to log()

#朴素贝叶斯分类函数

def classifyNB(vec2Classify, p0Vect, p1Vect, pClass1):
    p1 = sum(vec2Classify *p1Vect) +log(pClass1)   # 元素相乘
 


# 程序执行部分
import naiveBayes
from numpy import *
listOPosts,listClasses = naiveBayes.loadDataSet()
myVocabList = naiveBayes.createVocabList(listOPosts)
trainMat=[]
for postinDoc in listOPosts:
    trainMat.append(naiveBayes.setOfWords2Vec(myVocabList, postinDoc)) #使用循环填充每个文档中各元素
p0V,p1V,pAb = naiveBayes.trainNBO(trainMat,listClasses)
# naiveBayes.setOfWords2Vec(myVocabList,listOPosts[0])    
