# author:panying
# do something about the Bayes
# 一般步骤:对朴素贝叶斯的一般算法路径做描述
# 1、收集数据：此部分使用订单中昵称和商品标题名
# 2、准备数据：需要数值型或者布尔逻辑型
# 3、分析数据：有大量特征时，给绘制特征作用不大，此时使用直方图效果最好
# 4、训练算法：计算不同的独立特征的条件概率
# 5、测试算法：计算错误率
# 6、使用算法：一个常见的朴素贝叶斯应用应该是文档分类，可以在任意的分类场景中使用朴素贝叶斯分类器，不一定非要是文本。

# 2、准备数据：从文本中构建词向量
# 词表到向量的转换函数
def loadDataSet():
    postingList = [['my','dog','has','flea',\'
                    problems','help','please'],
                   ['maybe','not','take','him',\'
                    to','dog','park','stupid'],\
                   ['my','dalmation','is','so',\'
                    cute','I','love','him'],
                   ['stop','posting','stupid','worthless','garbage'],
                   ['mr','licks','ate','my','steak','how','to','stop','him'],
                   ['quit','buying','worthless','dog','food','stupid']]
    classVec = [0,1,0,1,0,1]  #1 代表侮辱性语言，0代表正常言论
    return posetingList,classVec

# 创建一个空集
def createVocabList(dataSet):
    vocabSet = set([])
    for document in dataSet:
        vocabSet = vocabSet | set(document) # 创建两个集合的并集
    return list(vocabSet)


def setOfWords2Vec(vocabList, inputSet):
    returnVec = [0]*len(vocabList)  # 创建一个其中所含元素都为0的向量
    for word in inputSet:
        if word in vocabList:
           returnVec[vocabList.index(word)] = 1
        else: print "the word: %s is not in my Vocabbulary!" % word
    return returnVec
        
        
        
        
